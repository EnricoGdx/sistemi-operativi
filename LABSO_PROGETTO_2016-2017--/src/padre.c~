#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h> 
#include <signal.h>
#include "albero.h"
#include "padre.h"
#include "figlio.h"


#define rosso     "\033[31m"      
#define verde   "\033[32m"      
#define giallo  "\033[33m"     
#define blu    "\033[34m"      
#define magenta "\033[35m"      
#define azzurro    "\033[36m"  
#define reset   "\033[0m"    

#define boldblu    "\033[1m\033[34m"

struct processo* radice;

void pnew(char* nome)
{
	
	if(radice == NULL)
	{
		radice = inizializza();
	}
	
	struct processo* p = cerca(nome,radice);
	if(p == NULL)
	{
		
		const int STR_LENGTH = 256;
		char nomeFiglio[STR_LENGTH];
		strcpy(nomeFiglio, nome);
	
		struct processo* pfiglio = (struct processo*) malloc(sizeof(struct processo));
		int pid = fork();
		//printf("blabla\n");
		//printf("pid: %d\n", pid);

		
	
		if(pid == 0)
		{
			//printf("mi chiamo: %s", nomeFiglio);
			//printf(" il mio pid: %d", pid);
			printf("\nIl processo %s è stato creato con SUCCESSO con il pid %d!\n\n", nome, getpid());
	
			main_figlio(nomeFiglio);
		}
		else if(pid > 0)
		{
			int fifo = open("tmp/scrittura",O_WRONLY);	

			pfiglio->vivo = 1;
			pfiglio->pid = pid;
			pfiglio->ppid = getpid();
			strcpy(pfiglio->nome, nome);
			pfiglio->padre = radice;
			pfiglio->figlio= NULL;
			pfiglio->fratello = NULL;
			inserisciFiglio(radice, pfiglio);
	
			sleep(1);
		}
		else if(pid < 0)
		{
			printf(rosso "\nIl processo %s non è stato creato a causa di un errore!\n" reset , nome);
		}
	}
	else
	{
		printf(giallo "\nIl processo %s è già stato creato in precedenza!\n"reset, nome);
	}
}
void plist()
{
	stampaLista(radice);
	printf("\n");
}
void pinfo(char* nome)
{
	struct processo* p = cerca(nome, radice);
	if(p == NULL)
	{
		printf(rosso"\nIl processo %s non esiste!\n"reset, nome);
	}
	else
	{
		if(p->vivo == 0)
		{
			printf(giallo"\nIl processo %s è stato chiuso!\n"reset, nome);
			return;
		}
		
		printf("\nInformazioni del processo %s\n", nome);

		kill(p->pid, SIGCONT);
		char buffer[256];
		strcpy(buffer, "pinfo ");
		strcat(buffer, nome);
		//strcat(buffer, nome);printf("3");
		int fifo = open("tmp/scrittura",O_WRONLY);	
	
		write(fifo, buffer, strlen(buffer));
		close(fifo);

		sleep(1);
		printf(boldblu "Stato: "reset);
		if(p-> vivo == 1)
		{
			printf(blu "attivo\n\n" reset);
		}
		else
		{
			printf(blu "terminato\n\n" reset);
		}
		printf(reset);
	}

	
}

void prclose(char* nome)
{
	struct processo* p = cerca(nome, radice);
	if(p == NULL)
	{
		printf(rosso"\nIl processo %s non esiste!\n"reset, nome);
	}
	else
	{
		int fifo;
		struct processo* padre = p->padre;

		kill(p->pid, SIGCONT);

		char buffer[256];
		strcpy(buffer, "pclose ");
		strcat(buffer, nome);
		//strcat(buffer, nome);printf("3");
		
		fifo = open("tmp/scrittura",O_WRONLY);	
	
		write(fifo, buffer, strlen(buffer));
		close(fifo);
		
		sleep(2);
		if(padre->vivo == 1){
			if(padre->pid == getpid())
			{
				waitpid(p->pid, NULL, 0);
			}
			else
			{
				kill(padre->pid, SIGCONT);
			
				//printf("SONO QUI!\n");
				char msg[256];
				char pid[256];
				strcpy(msg, "prmall ");
				strcat(msg, padre->nome);
				strcat(msg, " ");
				sprintf(pid, "%d", p->pid);
				strcat(msg, pid);
	
				fifo = open("tmp/scrittura",O_WRONLY);
				//printf("messaggio da inviare:%s\n", msg);
				write(fifo, msg, strlen(msg));
				close(fifo);
			}
		}	
		if(p->vivo == 1)
		{
			printf(reset "Il processo %s è stato chiuso con successo!\n" reset, nome);
		}
		eliminaFiglio(nome, radice);
	
		sleep(1);	
		
	}
}
void quit(char* nome)
{
	struct processo* p = cerca(nome, radice);
	if(p != NULL)
	{
		if(strcmp(nome, p->nome) == 0)
		{
			struct processo* f = p->figlio;
			if(f != NULL)
			{
				quit(f->nome);
				prmall(f->nome, 1);
			}
		}
		else
		{
			struct processo* f = p->fratello;
			if(f != NULL)
			{
				quit(f->nome);
				prmall(p->nome, 1);
			}
		}
	}
	
}
void pspawn(char* nome)
{
	struct processo* p = cerca(nome, radice);
	if(p == NULL)
	{
		printf(rosso"\nNon è possibile clonare il processo %s, perchè non esiste!\n" reset, nome);
	}
	else
	{
		if(p->vivo == 0){
			printf(giallo"\nNon è possibile clonare il processo %s, perchè è stato chiuso!\n" reset, nome);
			return;
		}
		//printf("%d\n", p->pid);
		kill(p->pid, SIGCONT);
		
		struct processo* clone = (struct processo*) malloc(sizeof(struct processo));
		char* nomeClone = (char*) malloc(sizeof(nome+257)); 
		char num[256];
		//strcpy(num, "");
		sprintf(num, "%d", p->figli + 1); 
		//printf("\nnum: %s\n", num);
		//strcpy(nomeClone, ""); 
		strcpy(nomeClone, nome);
		strcat(nomeClone, "_"); 
		strcat(nomeClone, num); 

		//printf("\n%s\n", nomeClone);

		strcpy(clone->nome, nomeClone); 
		clone->vivo = 1;
		clone->ppid = p->pid; 
		clone->padre = p; 
		clone->figli = 0;
		clone->figlio = NULL; 
		clone->fratello = NULL; 

		//printf("nome: %s\n", clone->nome);
		
		char buffer[256]; 
		strcpy(buffer, "pspawn ");
		strcat(buffer, nome);
		//strcat(buffer, nome);printf("3");
		
		//printf("\n%s\n", buffer);
		int fifo = open("tmp/scrittura",O_WRONLY);
	
		write(fifo, buffer, strlen(buffer));

		close(fifo);
	
		//sleep(3);
		//printf("sono dopo lo sleep\n");
		char msg[256];
		strcpy(msg,"");
		fifo = open("tmp/lettura", O_RDONLY);
		
		int length = (int)read(fifo, msg, 256);
		msg[length]='\0';
		//printf("%s\n", msg);
		clone->pid = atoi(msg);

		close(fifo);		
		
		inserisciFiglio(p, clone);
		
		sleep(1);
	}
}
void prmall(char* nome, int livello)
{
	struct processo* p = cerca(nome, radice);
	if(p == NULL)
	{
		printf(rosso"\nIl processo non esiste\n" reset);
	}
	else
	{
		struct processo* primofiglio = p->figlio;
		if(livello == 1)
		{
			
			if(p->figli > 0)
			{
				prmall(primofiglio->nome, livello + 1);	
			}
			prclose(p->nome);
		}
		else
		{
			struct processo* fratello = p->fratello;
			if(fratello !=NULL)
			{
				prmall(fratello->nome, livello);
			}
			if(primofiglio != NULL)
			{
				prmall(primofiglio->nome, livello + 1);
			}

			prclose(p->nome);
		}
	}
}
void ptree()
{
	if(radice == NULL)
	{
		radice = inizializza();
	}
	stampaAlbero(radice);
	printf("\n");
}

void pchname(char* vecchio, char* nuovo)
{
	printf("vecchio: %s - nuovo: %s\n", vecchio, nuovo);
	struct processo* p = cerca(vecchio, radice);
	if(p == NULL)
	{
		printf(rosso"\nIl processo non esiste\n" reset);
	}
	else
	{

		kill(p->pid, SIGCONT);
		char buffer[256];
		char nome[256];
		char vnome[256];
		strcpy(vnome, vecchio);

		struct processo* figlio = p->figlio;
		struct processo* fratello = p->fratello;
		if(trovaCarattere(vecchio, '_') == 1)
		{
			
			char str[256];
			char* n = strtok(vecchio, "_");
			strcpy(str, n);
			strcpy(nome, "");
			strcat(nome, nuovo);
			while(n != NULL )
			{
				if(strcmp(n, str) != 0)
				{	
					strcat(nome, "_");
					strcat(nome, n);
				}
				n = strtok(NULL, "_");
				
			}
			//printf("nome: %s\n", nome);
			strcpy(p->nome, nome);
		}
		else
		{
			strcpy(nome, nuovo);
			strcpy(p->nome, nuovo);
		}

		strcpy(buffer, "pchname ");
		strcat(buffer, vnome);
		strcat(buffer, " ");
		strcat(buffer, nome);
		printf("VECCHIO = %s\n", vnome);
		printf("NOME = %s\n", nome);
		//strcat(buffer, nome);printf("3");
		int fifo = open("tmp/scrittura",O_WRONLY);	
	
		write(fifo, buffer, strlen(buffer));
		close(fifo);

		sleep(1);

		if(figlio != NULL)
		{
			pchname(figlio->nome, nuovo);
		}
		if(fratello != NULL)
		{
			pchname(fratello->nome, nuovo);
		}	
	}
}

int trovaCarattere(char* stringa, char carattere)
{
	int i = 0;
	do{
		if(stringa[i] == carattere)
		{
			return(1);
		}
		i++;

	}while(stringa[i] != '\0');

	return(0);
}

void ptreetab()
{
	if(radice == NULL)
	{
		radice = inizializza();
	}
	stampaLivelli(radice);
	printf("\n");
}

void ptable()
{
	stampaListaDettagliata(radice);
}
